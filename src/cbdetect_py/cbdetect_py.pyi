from typing import ClassVar, List

import numpy

HessianResponse: DetectMethod
LocalizedRadonTransform: DetectMethod
MonkeySaddlePoint: CornerType
SaddlePoint: CornerType
TemplateMatchFast: DetectMethod
TemplateMatchSlow: DetectMethod

class Board:
    energy: List[List[List[float]]]
    idx: List[List[int]]
    num: int
    def __init__(self) -> None: ...

class Corner:
    p: List[tuple]
    r: List[int]
    score: List[float]
    v1: List[tuple]
    v2: List[tuple]
    v3: List[tuple]
    def __init__(self) -> None: ...

class CornerType:
    __members__: ClassVar[dict] = ...  # read-only
    MonkeySaddlePoint: ClassVar[CornerType] = ...
    SaddlePoint: ClassVar[CornerType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class DetectMethod:
    __members__: ClassVar[dict] = ...  # read-only
    HessianResponse: ClassVar[DetectMethod] = ...
    LocalizedRadonTransform: ClassVar[DetectMethod] = ...
    TemplateMatchFast: ClassVar[DetectMethod] = ...
    TemplateMatchSlow: ClassVar[DetectMethod] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Params:
    corner_type: CornerType
    detect_method: DetectMethod
    init_loc_thr: float
    norm: bool
    norm_half_kernel_size: int
    occlusion: bool
    overlay: bool
    polynomial_fit: bool
    polynomial_fit_half_kernel_size: int
    radius: List[int]
    score_thr: float
    show_debug_image: bool
    show_grow_processing: bool
    show_processing: bool
    strict_grow: bool
    def __init__(self) -> None: ...

def boards_from_corners(
    img: numpy.ndarray, corners: Corner, params: Params
) -> List[Board]: ...
def find_corners(img: numpy.ndarray, params: Params) -> Corner: ...
def hessian_response(img: numpy.ndarray) -> numpy.ndarray: ...
